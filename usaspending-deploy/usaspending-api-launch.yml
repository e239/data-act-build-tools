#===============================  USASPENDING-API-LAUNCH PLAYBOOK  ===============================#

#===============================  Notes  ===============================#
#  - Branch options: sandbox, dev, stg, master, used for filebeat index #
#  - 'envs' used for filebeat to translate                              #
#  - You MUST provide a DOMAIN_NAME for ALLOWED_HOSTS and SSL           #
#=======================================================================#

---
- hosts: "localhost"
  user: ec2-user
  become_method: sudo

  vars:
    ALLOWED_HOSTS: "{{ ALLOWED_HOSTS }}"
    BRANCH: "{{ BRANCH }}"
    DOMAIN: "{{ DOMAIN }}"
    SITE: "{{ SITE }}"
    ANSIBLE_VARS_ENV: "{{ ANSIBLE_VARS_ENV }}"
    BUILD_TYPE: "{{ BUILD_TYPE }}"
    INSTANCE_ID: "{{ INSTANCE_ID }}"

    envs:
      master: {env_long: prod, env_short: prod}
      stg: {env_long: staging, env_short: stg}
      qat: {env_long: qat, env_short: qat}
      dev: {env_long: dev, env_short: dev}
      sandbox: {env_long: sandbox, env_short: sbx}

    CODE_HOME: /data-act/backend
    CONFIG_HOME: /data-act/config

    PROD_CACHE_TIMEOUT: None
    NONPROD_CACHE_TIMEOUT: 600

    ansible_python_interpreter: "/usr/bin/python3"

  tasks:

    - name: Load variables from config repo
      include_vars: "{{ CONFIG_HOME }}/deploy/ansible-vars-{{ ANSIBLE_VARS_ENV }}.yml"

#===============================  Nginx Config  ===============================#
    - name: API | Nginx configs for usaspending api
      when: BUILD_TYPE == 'api'
      block:
      - name: set nginx configuration path to SSL
        set_fact:
          nginx_path: "{{ CONFIG_HOME }}/deploy/nginx/nginx_usaspending_api.conf"

      - name: (remove later) run nginx as ec2-user
        lineinfile:
          dest: "{{ nginx_path }}"
          regexp: '^\s*user\s'
          line: 'user nobody;'

      - name: add server name to nginx config
        replace:
          path: "{{ nginx_path }}"
          regexp: '^\s*server_name .*;'
          replace: "\n\t\tserver_name  {{ DOMAIN }};"

      - name: copy nginx config
        become: true
        copy:
          src:  "{{ nginx_path }}"
          dest: /etc/nginx/nginx.conf
          remote_src: true

#===============================  uwsgi_db.ini Setup  ===============================#

    - name: API | duplicate config file to uwsgi_db.ini
      when: BUILD_TYPE == 'api'
      become: true
      copy:
        src:  "{{ CODE_HOME }}/config/uwsgi.ini"
        dest: "{{ CODE_HOME }}/config/uwsgi_db.ini"
        remote_src: true

    - name: copy git credentials from S3 Bucket
      become: true
      aws_s3:
        mode: get
        bucket: da-config
        object: "/usaspending/{{ vars['envs'][BRANCH]['env_long'] }}-usaspending-api-secrets.yml"
        dest: "/etc/{{ vars['envs'][BRANCH]['env_long'] }}-usaspending-api-secrets.yml"
        region: us-gov-west-1

    - name: load secrets
      include_vars: "/etc/{{ vars['envs'][BRANCH]['env_long'] }}-usaspending-api-secrets.yml"

    - name: API | add DB_SOURCE to uswgi ini
      when: BUILD_TYPE == 'api'
      become: true
      shell: "echo env=DB_SOURCE={{ DB_SOURCE }} >> {{ CODE_HOME }}/config/uwsgi_db.ini"

    - name: API | add DB_R1 to uswgi ini
      when: BUILD_TYPE == 'api'
      become: true
      shell: "echo env=DB_R1={{ DB_R1 }} >> {{ CODE_HOME }}/config/uwsgi_db.ini"

#===============================  DataDog Configuration  ===============================#

    - name: Define Datadog APM env key for this app environment
      become: true
      lineinfile:
        dest: "/etc/datadog-agent/datadog.yaml"
        regexp: "  env: .*"
        line: "  env: usaspending_{{ ANSIBLE_VARS_ENV | lower }}"

    - name: API | Add custom tags to datadog.yaml
      when: BUILD_TYPE == 'api'
      become: true
      lineinfile:
        dest: "/etc/datadog-agent/datadog.yaml"
        regexp: '  - "{{ item.tagname }}:.*"'
        line: '  - "{{ item.tagname }}:{{ item.value }}"'
      with_items:
        - { tagname: 'deploy_name', value: "usaspending_{{ ANSIBLE_VARS_ENV | lower }}_api" }
        - { tagname: 'deployed_ec2_instance_id', value: "{{ INSTANCE_ID }}" }

    - name: BD | Add custom tags to datadog.yaml
      when: BUILD_TYPE == 'bulk-download'
      become: true
      lineinfile:
        dest: "/etc/datadog-agent/datadog.yaml"
        regexp: '  - "{{ item.tagname }}:.*"'
        line: '  - "{{ item.tagname }}:{{ item.value }}"'
      with_items:
        - { tagname: 'deploy_name', value: "usaspending_{{ ANSIBLE_VARS_ENV | lower }}_bd" }
        - { tagname: 'deployed_ec2_instance_id', value: "{{ INSTANCE_ID }}" }

    - name: disable datadog apm if env is sandbox or dev
      become: true
      when: BRANCH in ["qat", "dev", "sandbox"]
      lineinfile:
        dest: "/etc/datadog-agent/datadog.yaml"
        regexp: "^  enabled: true"
        insertafter: "^apm_config:.*"
        line: "  enabled: false"

    - name: Enable Datadog in settings.py if env is prod or staging
      when: BRANCH in ["master", "stg"]
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '^(DATADOG_TRACE = {\n[^}]*\s+)"ENABLED": False,'
        replace: '\1"ENABLED": True,'

    - name: ensure dd-agent ownership for datadog directory
      become: true
      file:
        path: /etc/datadog-agent/
        state: directory
        owner: dd-agent
        group: dd-agent
        recurse: yes

#===============================  usaspending_api/settings.py  ===============================#

    - name: add settings.py env vars (API only)
      when: BUILD_TYPE == 'api'
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '^DOWNLOAD_ENV =.*',
            line: "DOWNLOAD_ENV = '{{ DOWNLOAD_ENV }}'" }

        - { regexp: '^MONTHLY_DOWNLOAD_S3_BUCKET_NAME =.*',
            line: "MONTHLY_DOWNLOAD_S3_BUCKET_NAME = '{{ MONTHLY_DOWNLOAD_S3_BUCKET_NAME }}'" }

        - { regexp: '\s*STATIC_URL =.*',
            line: "STATIC_URL = '{{ STATIC_ASSETS_URL }}'" }

    - name: add settings.py env vars
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: "^IS_LOCAL =.*",
            line:   "IS_LOCAL = False" }

        - { regexp: '^USASPENDING_AWS_REGION =.*',
            line: "USASPENDING_AWS_REGION = '{{ USASPENDING_AWS_REGION }}'" }

        - { regexp: '^BULK_DOWNLOAD_S3_BUCKET_NAME =.*',
            line: "BULK_DOWNLOAD_S3_BUCKET_NAME = '{{ BULK_DOWNLOAD_S3_BUCKET_NAME }}'" }

        - { regexp: '^BULK_DOWNLOAD_SQS_QUEUE_NAME =.*',
            line: "BULK_DOWNLOAD_SQS_QUEUE_NAME = '{{ BULK_DOWNLOAD_SQS_QUEUE_NAME }}'" }

        - { regexp: '\s*ES_HOSTNAME\*=.*',
            line: "ES_HOSTNAME = '{{ ES_HOSTNAME }}'" }

    - name: API | add host to ALLOWED_HOSTS
      when: BUILD_TYPE == 'api'
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*ALLOWED_HOSTS =.*'
        line: "ALLOWED_HOSTS = ['{{ ALLOWED_HOSTS|d('') }}']"

    - name: API | turn debug off in production or staging
      when: BRANCH in ['master','stg'] and BUILD_TYPE == 'api'
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*DEBUG =.*'
        line: "DEBUG = False"
        
    - name: API | add host for permalink
      when: BUILD_TYPE == 'api'
      lineinfile:
          dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
          regexp: '\s*HOST =.*'
          line: "HOST = '{{ SITE }}'"
          
    - name: API | add host for permalink
      when: BUILD_TYPE == 'bulk-download'
      lineinfile:
          dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
          regexp: '\s*HOST =.*'
          line: "HOST = '{{ SITE }}'"

    - name: API | cache settings (staging/prod, elasticache)
      when: BRANCH in ['master','stg'] and BUILD_TYPE == 'api'
      block:
      - name: enable elasticache
        lineinfile:
          dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
          regexp: '\s*CACHE_ENVIRONMENT\s*=.*'
          line: "CACHE_ENVIRONMENT = 'elasticache'"

      - name: replace ELASTICACHE-CONNECTION-STRING
        replace:
          dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
          regexp: '"ELASTICACHE-CONNECTION-STRING"'
          replace: "{{ ELASTICACHE_URL }}"

      - name: replace ELASTICACHE-MASTER-STRING
        replace:
          dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
          regexp: "ELASTICACHE-MASTER-STRING"
          replace: "{{ ELASTICACHE_MASTER_URL }}"

      - name: replace TIMEOUT-IN-SECONDS
        replace:
          dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
          regexp: 'TIMEOUT-IN-SECONDS'
          replace: "{{ PROD_CACHE_TIMEOUT }}"

    - name: API | cache settings (nonprod)
      when: BRANCH in ['dev','sandbox','qat'] and BUILD_TYPE == 'api'
      block:
      - name: enable local cache
        lineinfile:
          dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
          regexp: '\s*CACHE_ENVIRONMENT\s*=.*'
          line: "CACHE_ENVIRONMENT = 'local'"

      - name: replace TIMEOUT-IN-SECONDS
        replace:
          dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
          regexp: 'TIMEOUT-IN-SECONDS'
          replace: "{{ NONPROD_CACHE_TIMEOUT }}"

#===============================  SSL Certs  ===============================#

    - name: API | SSL Certs
      when: BUILD_TYPE == 'api'
      become: true
      block:
      - name: copy public.pem and private.pem from S3 Bucket
        aws_s3:
          mode: get
          bucket: usaspending-ssl
          region: us-gov-west-1
          object: "{{ item.object }}"
          dest: "{{ item.dest }}"
        with_items:
          - { object: "/usaspending-api-gov/{{ DOMAIN }}/public.pem",
              dest: "/etc/cert.pem" }
          - { object: "/usaspending-api-gov/{{ DOMAIN }}/private.pem",
              dest: "/etc/cert.key" }

#===============================  Filebeat Configuration  ===============================#

    - name: copy filebeat config
      become: true
      copy:
        src:  "{{ CONFIG_HOME }}/deploy/elk/usaspending_api_filebeat.yml"
        dest: /etc/filebeat/filebeat.yml
        remote_src: true

    - name: API | update filebeat config to set correct index
      when: BUILD_TYPE == 'api'
      become: true
      replace:
        dest: /etc/filebeat/filebeat.yml
        regexp: 'index: filebeat'
        replace: "index: usaspending-api-{{ vars['envs'][BRANCH]['env_short'] }}"

    - name: BD | update filebeat config to set correct index
      when: BUILD_TYPE == 'bulk-download'
      become: true
      replace:
        dest: "/etc/filebeat/filebeat.yml"
        regexp: 'index: filebeat'
        replace: "index: usaspending-bd-{{ vars['envs'][BRANCH]['env_long'] }}"

#===============================  Setup supervisord.service  ===============================#

    - name: Create symlinks (Python 3.7)
      file:
        force: yes
        src: "{{ item.src }}"
        path: "{{ item.path }}"
        state: link
      with_items:
        - { src: "/usr/local/bin/supervisord", path: "/bin/supervisord" }
        - { src: "/usr/local/bin/echo_supervisord_conf", path: "/bin/echo_supervisord_conf" }

    - name: make supervisord.service directory
      file:
        path: /etc/supervisord/conf.d
        recurse: true
        state: directory

    - name: supervisord.service conf
      become: true
      shell: echo_supervisord_conf > /etc/supervisord/supervisord.conf

    - name: supervisord.service conf.d append
      become: true
      shell: echo "files = conf.d/*.conf" >> /etc/supervisord/supervisord.conf

    - name: BD | Set supervisord.service config file location
      when: BUILD_TYPE == 'bulk-download'
      become: true
      replace:
        dest: "{{ CONFIG_HOME }}/supervisord.service/supervisord.service"
        regexp: 'ExecStart=/bin/supervisord.*'
        replace: "ExecStart=/bin/supervisord -c {{ CODE_HOME }}/usaspending_api/bulk_download/config/supervisord.conf"
    
    - name: BD | Set supervisord.service config file location
      when: BUILD_TYPE == 'bulk-download'
      become: true
      replace:
        dest: "{{ CONFIG_HOME }}/supervisord.service/supervisord.service"
        regexp: 'ExecStart=/bin/supervisord.*'
        replace: "ExecStart=/bin/supervisord -c {{ CODE_HOME }}/usaspending_api/bulk_download/config/supervisord.conf"

    - name: BD | Set supervisord.service config file location and working dir
      when: BUILD_TYPE == 'bulk-download'
      become: true
      ini_file:
        dest: "{{ CONFIG_HOME }}/supervisord.service/supervisord.service"
        section: Service
        option: "{{ item.option }}"
        value: "{{ item.value }}"
      with_items:
        - { option: "ExecStart", value: "/bin/supervisord -c {{ CODE_HOME }}/usaspending_api/bulk_download/config/supervisord.conf" }
        - { option: "WorkingDirectory", value: "{{ CODE_HOME }}/usaspending_api/" }

    - name: BD | Insert environment variables into supervisord.conf
      when: BUILD_TYPE == 'bulk-download'
      become: true
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/bulk_download/config/supervisord.conf"
        regexp: "%\\(ENV_{{ item.varname }}\\)s"
        replace: "{{ item.value }}"
      with_items:
        - { varname: "NUM_PROCS", value: "{{ NUM_PROCS }}" }
        - { varname: "DATABASE_URL_VAR", value: "{{ DB_SOURCE }}" }
        - { varname: "DOWNLOAD_DATABASE_URL", value: "{{ DOWNLOAD_DATABASE_URL }}" }
      register: item_result
      failed_when: not item_result.changed  # make sure all these are found and replaced (makes this not a repeatable task)

    - name: supervisord.service copy
      copy:
        remote_src: true
        src:  "{{ CONFIG_HOME }}/supervisord.service/supervisord.service"
        dest: /usr/lib/systemd/system/supervisord.service

#===============================  Enable and Restart Services  ===============================#

    - name: enable & restart datadog-agent service
      become: true
      shell: "systemctl enable datadog-agent && systemctl restart datadog-agent"

    - name: enable & restart filebeat service
      become: true
      shell: "systemctl enable filebeat && systemctl restart filebeat"

    - name: enable & restart supervisord.service
      become: true
      shell: "systemctl enable supervisord && systemctl restart supervisord"

