#===============================  USASPENDING-API-IMAGE PLAYBOOK  ===============================#
---
- hosts: all

  become_method: sudo
  remote_user: ec2-user

  vars:
    BRANCH: "{{ BRANCH }}"
    CONFIG_BRANCH: "{{ CONFIG_BRANCH }}"
    TOOLS_BRANCH: "{{ TOOLS_BRANCH }}"
    REPO: https://github.com/fedspendingtransparency/usaspending-api.git
    TOOLS_REPO: https://github.com/fedspendingtransparency/data-act-build-tools.git
    CODE_HOME: /data-act/backend
    REQ_DIR: "{{ CODE_HOME }}/requirements"
    ansible_python_interpreter: /usr/bin/python3
    DATADOG_YML_PATH: "/data-act/config/deploy/datadog.yaml"
    GIT_TOKEN: github-data-act-service-account-token

    envs:
      master : {env_long: prod }
      staging: {env_long: staging }
      qat    : {env_long: qat }
      dev    : {env_long: dev }
      sandbox: {env_long: sandbox}

  tasks:

#=============================== Copy Git Credentials from SSM ===============================#

    - name: copy github credentials from SSM
      set_fact:
        pat_token: "{{ lookup('aws_ssm', GIT_TOKEN, region='us-gov-west-1') }}"

#===============================  Git Checkout  ===============================#
    - name: Set usaspending url
      set_fact: 
        CONFIG_URL: https://pat:{{ pat_token }}@github.com/fedspendingtransparency/usaspending-config.git

    - name: Checkout required repos
      become: true
      git:
        repo: "{{ item.repo }}"
        version: "{{ item.version }}"
        dest: "{{ item.dest }}"
        force: "yes"
      with_items:
        - { repo: "{{ REPO }}", version: "{{ BRANCH }}", dest: "{{ CODE_HOME }}" }
        - { repo: "{{ CONFIG_URL }}", version: "{{ CONFIG_BRANCH }}", dest: "/data-act/config" }
        - { repo: "{{ TOOLS_REPO }}", version: "{{ TOOLS_BRANCH }}", dest: "/data-act/build-tools" }

    - name: assign file ownership to ec2-user
      become: true
      file:
        path: "{{ item }}"
        owner: ec2-user
        recurse: yes
      with_items: 
        - /data-act/
        - /tmp

#===============================  Install PIP Packages  ===============================#
    - name: Configure PIP
      become: true
      block: 
        - name: update pip
          shell: pip3 install --upgrade pip

        - name: install python packages based on requirements.txt
          pip:
            requirements: "{{ REQ_DIR }}/requirements-app.txt"
            executable: pip3

        - name: install python packages based on requirements-server.txt
          pip:
            requirements: "{{ REQ_DIR }}/requirements-server.txt"
            executable: pip3

        - name: ensure the correct directory structure for tmp nginx files
          file:
            path: /var/lib/nginx/tmp
            state: directory
            owner: ec2-user
            mode: "u+wrx"
            recurse: yes

        - name: set starting directory to CODE_HOME
          lineinfile:
            dest: /home/ec2-user/.bashrc
            line: "cd {{ CODE_HOME }}"
            insertafter: EOF

#===============================  Configure DataDog Key  ===============================#

    - name: get datadog_key from SSM
      set_fact: 
        dd_key: "{{ lookup('aws_ssm', 'datadog_key', region='us-gov-west-1') }}"

    - name: add Datadog license key to datadog.yaml
      lineinfile:
        dest: "{{ DATADOG_YML_PATH }}"
        regexp: '\s*api_key: .*'
        line: "api_key: {{ dd_key }}"
        create: yes

    - name: copy datadog.yml to its home location
      become: true
      copy:
        src: "{{ DATADOG_YML_PATH }}"
        dest: /etc/datadog-agent/datadog.yaml
        remote_src: true

#=============================== Configure ClamAv  ===============================#
    - name: Configure ClamAV
      become: true
      block:
        - name: Create /var/log/clamav
          file:
            path: /var/log/clamav
            state: directory

        - name: chmod 0755 clamscan_daily
          file:
            path: /data-act/config/clamav/clamscan_daily.sh
            owner: ec2-user
            mode: "0755"

        - name : create Crontab to run daily scans
          cron:
            name: add clamscan_daily.sh and freshclam to crontab
            minute: "0"
            hour: "1"
            job: '/usr/bin/freshclam --quiet && /data-act/config/clamav/clamscan_daily.sh'

#===============================  LifeCycle Hook Actions  ===============================#
    - name: Configure LifeCycle Hooks
      become: true
      block: 
        - name: chmod 0755 update_lifecycle_status.sh script
          file:
            path: /data-act/config/asg_lifecycle_hook/update_lifecycle_status.sh
            owner: ec2-user
            mode: "0755"

        - name : create crontab for periodic check of lifecycle status
          cron:
            name: check every minute if instance is terminating and proceed when uwsgi processes are cleared
            job: '/data-act/config/asg_lifecycle_hook/update_lifecycle_status.sh 2>&1 | /usr/bin/logger -t lifecycle_checks'

#===============================  Logrotate  ===============================#

    - name: move logrotate into nightly cron
      become: true
      copy:
        src:  /data-act/config/deploy/elk/usaspending-api.logrotate
        dest: /etc/logrotate.d/usaspending-api
        remote_src: true

#===============================  Set http and https proxies  ===============================
    - name: copy ansible-vars-{{ vars['envs'][BRANCH]['env_long'] }}.yml to 
      fetch:
        src: "/data-act/config/deploy/ansible-vars-{{ vars['envs'][BRANCH]['env_long'] }}.yml"
        dest: "{{ playbook_dir }}/"
        flat: true

    - name: Load variables from config repo
      include_vars: "{{ playbook_dir }}/ansible-vars-{{ vars['envs'][BRANCH]['env_long'] }}.yml"

    - name: create /etc/profile.d/proxy.sh to export proxy env vars
      become: true
      copy:
        dest: /etc/profile.d/proxy.sh
        mode: 0755
        content: |
          http_proxy={{ SQUID_ELB }}
          https_proxy={{ SQUID_ELB }}
          no_proxy={{ NO_PROXY_VAR }}
          export http_proxy https_proxy no_proxy
          
    - name: add proxy env vars to /etc/environment
      become: true
      blockinfile:
        dest: /etc/environment
        block: |
          http_proxy={{ SQUID_ELB }}
          https_proxy={{ SQUID_ELB }}
          HTTP_PROXY={{ SQUID_ELB }}
          HTTPS_PROXY={{ SQUID_ELB }}
          no_proxy={{ NO_PROXY_VAR }}
          NO_PROXY={{ NO_PROXY_VAR }}
    - name: Execute proxy.sh
      shell: /etc/profile.d/proxy.sh

    - name: add proxy env to /etc/systemd/system.config
      become: true
      ini_file:
        path: /etc/systemd/system.conf
        section: Manager
        option: DefaultEnvironment
        value: >
          http_proxy={{ SQUID_ELB }}
          https_proxy={{ SQUID_ELB }}
          HTTP_PROXY={{ SQUID_ELB }}
          HTTPS_PROXY={{ SQUID_ELB }}
          no_proxy={{ NO_PROXY_VAR }}
          NO_PROXY={{ NO_PROXY_VAR }}
