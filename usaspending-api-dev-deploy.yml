---
- hosts: "{{ HOST }}"

# You MUST provide a DOMAIN_NAME for ALLOWED_HOSTS and SSL

# NOTE -------
# This playbook is used for dev and sbx environments. Prod/Staging deploys are built by usaspending-api-image.yml and usaspending-api-launch.yml

  vars:
    REPO: https://github.com/fedspendingtransparency/usaspending-api.git

    ## Branch options: sandbox, dev, stg, master
    BRANCH: "{{ BRANCH }}"

    ## Used only for filebeat: 'envs' is used to translate 
    ## BRANCH options above into filebeat.yml index
    envs:
      master: {env_long: prod, env_short: prod}
      staging: {env_long: staging, env_short: stg}
      dev: {env_long: dev, env_short: dev}
      sandbox: {env_long: sandbox, env_short: sbx}

    DOMAIN: "{{ DOMAIN_NAME }}"
    ALLOWED_HOSTS: "{{ ALLOWED_HOSTS }}"
    VARS_PREFIX: "{{ VARS_PREFIX }}"
    CODE_HOME: /data-act/backend
    CONFIG_HOME: /data-act/config

    REQ_DIR: "{{ CODE_HOME }}/requirements"

    PROD_CACHE_TIMEOUT: 60000
    NONPROD_CACHE_TIMEOUT: 600

  become_method: sudo  

  user: ec2-user
  tasks:

# Copy Git Credentials from S3 Bucket

    - name: Copy Git credentails from S3 Bucket
      shell: "aws s3 cp s3://da-config/usaspending/id_rsa_usaspending_config /home/ec2-user/.ssh/ --region us-gov-west-1"

    - name: Change mode for the id_rsa_usaspending_config
      become: true 
      shell: chmod 400 /home/ec2-user/.ssh/id_rsa_usaspending_config

    - name: Checkout code from git
      become: true
      git: repo={{ REPO }}
           version={{ BRANCH }}  
           dest={{ CODE_HOME }} 
           accept_hostkey=true 
           force=yes

    - name: Checkout config from git
      become: true
      git: repo=git@github.com:fedspendingtransparency/usaspending-config.git 
           dest={{ CONFIG_HOME }} 
           accept_hostkey=true 
           force=yes 
           key_file="/home/ec2-user/.ssh/id_rsa_usaspending_config"

    - name: assign ownership of api to ec2-user
      become: true
      file: path=/data-act owner=ec2-user recurse=yes

    - name: assign ownership of tmp to ec2-user
      become: true
      file: path=/tmp owner=ec2-user recurse=yes

    - name: Load variables from config repo
      include_vars: "{{ VARS_PREFIX }}-bulk-download-vars-ansible.yml"
  
    - name: update pip
      become: true 
      shell: pip3.5 install --upgrade pip 

    - name: copy requirements.txt (to check for changes)
      become: true 
      copy:
        src:  "{{ REQ_DIR }}/requirements.txt"
        dest: "{{ REQ_DIR }}/requirements_copy.txt"
        remote_src: true
      register: requirements_txt

    - name: install python packages based on requirements.txt
      become: true 
      when: requirements_txt.changed
      pip: chdir="{{ REQ_DIR }}" requirements="requirements.txt" executable=pip3.5

    - name: copy caching_requirements.txt (to check for changes)
      become: true 
      copy:
        src:  "{{ REQ_DIR }}/caching_requirements.txt"
        dest: "{{ REQ_DIR }}/caching_requirements_copy.txt"
        remote_src: true
      register: caching_requirements_txt

    - name: install python packages based on caching_requirements.txt
      become: true 
      when: caching_requirements_txt.changed
      pip: chdir="{{ REQ_DIR }}" requirements="caching_requirements.txt" executable=pip3.5

    - name: copy server_requirements.txt (to check for changes)
      become: true 
      copy:
        src:  "{{ REQ_DIR }}/server_requirements.txt"
        dest: "{{ REQ_DIR }}/server_requirements_copy.txt"
        remote_src: true
      register: server_requirements_txt

    - name: install python packages based on server_requirements.txt
      become: true
      when: server_requirements_txt.changed
      pip: chdir="{{ REQ_DIR }}" requirements="server_requirements.txt" executable=pip3.5

    - name: copy legacy_requirements.txt (to check for changes)
      become: true 
      copy:
        src:  "{{ REQ_DIR }}/legacy_requirements.txt"
        dest: "{{ REQ_DIR }}/legacy_requirements_copy.txt"
        remote_src: true
      register: legacy_requirements_txt
      
    - name: install python packages based on legacy_requirements.txt
      become: true
      when: legacy_requirements_txt.changed
      pip: chdir="{{ REQ_DIR }}" requirements="legacy_requirements.txt" executable=pip2

    - name: collect django static assets
      register: collectassets
      shell: python3.5 manage.py collectstatic --clear --no-input
      args:
        chdir: "{{ CODE_HOME }}"
      ignore_errors: true

    - name: upload django static assets
      when: collectassets | success
      shell: "aws s3 cp --recursive usaspending_api/static s3://ds-api-assets/{{ BRANCH }}/ --region us-gov-west-1"
      args:
        chdir: "{{ CODE_HOME }}"

    - name: set static assets path
      when: collectassets | success
      set_fact:
        STATIC_ASSETS_URL: "{{ STATIC_ASSETS_URL }}{{ BRANCH }}/"      

    - name: set nginx configuration path to SSL
      set_fact:
         nginx_path: "{{ CONFIG_HOME }}/deploy/nginx/nginx_usaspending_api.conf"

    - name: (remove later) run nginx as ec2-user
      lineinfile:
        dest: "{{ nginx_path }}"
        regexp: '\s*user.*;'
        line: 'user ec2-user;'

    - name: check whether nginx config has SSL enabled
      command: "awk '/server_name/' {{ nginx_path }}"
      register: check_ssl

    - name: add server name to nginx config (if SSL enabled)
      when: check_ssl.stdout != ""
      lineinfile:
        dest: "{{ nginx_path }}"
        regexp: '\s*server_name.*;'
        line: "\tserver_name {{ DOMAIN }};"

    - name: copy nginx config
      become: true
      copy:
        src:  "{{ nginx_path }}"
        dest: "/etc/nginx/nginx.conf"
        remote_src: true
    
    - name: ensure the correct directory structure for tmp nginx files
      become: true
      file: 
        path: /var/lib/nginx/tmp
        state: directory
        owner: ec2-user
        mode: "u+wrx"
        recurse: true

    - name: set starting directory to CODE_HOME
      become: true
      lineinfile: 
        dest: /home/ec2-user/.bashrc
        line: "cd {{ CODE_HOME }}"
        insertafter: EOF 

    - name: duplicate config file to uwsgi_db.ini
      become: true
      copy:
        src:  "{{ CODE_HOME }}/config/uwsgi.ini"
        dest: "{{ CODE_HOME }}/config/uwsgi_db.ini"
        remote_src: true

    - name: Download secrets from S3 Bucket
      become: true
      shell: "aws s3 cp s3://da-config/usaspending/{{ BRANCH }}-usaspending-api-secrets.yml /etc/ --region us-gov-west-1"

    - name: Load secrets 
      include_vars: /etc/{{ BRANCH }}-usaspending-api-secrets.yml

    - name: add DB_SOURCE to uswgi ini
      become: true
      shell: "echo -n env=DB_SOURCE= | cat - {{ DB_SOURCE }} >> {{ CODE_HOME }}/config/uwsgi_db.ini"

    - name: add DB_R1 to uswgi ini
      become: true
      shell: "echo -n env=DB_R1= | cat - {{ DB_R1 }} >> {{ CODE_HOME }}/config/uwsgi_db.ini"   
      
# newrelic settings

    - name: copy NR_Key from S3
      become: true
      shell: "aws s3 cp s3://da-config/shared/nr_key.yml /etc/nr_key --region us-gov-west-1 --region us-gov-west-1"

    - name: get contents of nr_key file
      command: cat /etc/nr_key
      register: NR_KEY

    - name: add newrelic license key
      lineinfile:
        dest: "{{ CODE_HOME }}/config/newrelic.ini"
        regexp: '\s*license_key =.*'
        line: "license_key = {{ NR_KEY.stdout }}"

    - name: copy nr_key to newrelic-infra.yml file
      become: true
      shell: echo "license_key:'{{ NR_KEY.stdout }}'" | tee -a /etc/newrelic-infra.yml
        
    - name: add newrelic label (app_name)
      lineinfile:
        dest: "{{ CODE_HOME }}/config/newrelic.ini"
        regexp: '\s*app_name =.*'
        line: "app_name = DA-Website-API-{{ BRANCH }}"
        
    - name: add single-interpreter to uwsgi_db.ini
      become: true
      ini_file:
        dest: "{{ CODE_HOME }}/config/uwsgi_db.ini"
        section: "uwsgi"
        option: single-interpreter
        value: true
        
    - name: modify supervisord configuration (start command)
      ini_file:
        dest: "{{ CODE_HOME }}/config/supervisord.conf"
        section: "program:uwsgi"
        option: command
        value: "newrelic-admin run-program uwsgi --ini /data-act/backend/config/uwsgi_db.ini --socket :3030 --stats /tmp/stats.socket"
        
    - name: modify supervisord configuration (environment)
      ini_file:
        dest: "{{ CODE_HOME }}/config/supervisord.conf"
        section: "program:uwsgi"
        option: environment
        value: "PYTHONPATH=%(ENV_PATH)s:/data-act/backend,NEW_RELIC_CONFIG_FILE={{ CODE_HOME }}/config/newrelic.ini"

# usaspending_api/settings.py

    - name: add bulk download option
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*IS_LOCAL =.*'
        line: "IS_LOCAL = False"

    - name: add bulk SQS name
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*BULK_DOWNLOAD_SQS_QUEUE_NAME =.*'
        line: "BULK_DOWNLOAD_SQS_QUEUE_NAME = '{{ BULK_DOWNLOAD_SQS_QUEUE_NAME }}'"

    - name: add bulk S3 name
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*BULK_DOWNLOAD_S3_BUCKET_NAME =.*'
        line: "BULK_DOWNLOAD_S3_BUCKET_NAME = '{{ BULK_DOWNLOAD_S3_BUCKET_NAME }}'"

    - name: add CSV SQS name
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CSV_SQS_QUEUE_NAME =.*'
        line: "CSV_SQS_QUEUE_NAME = '{{ CSV_SQS_QUEUE_NAME }}'"

    - name: add CSV S3 name
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CSV_S3_BUCKET_NAME =.*'
        line: "CSV_S3_BUCKET_NAME = '{{ CSV_S3_BUCKET_NAME }}'"
        
    - name: add CSV AWS region
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CSV_AWS_REGION =.*'
        line: "CSV_AWS_REGION = '{{ CSV_AWS_REGION }}'"

    - name: add Bulk AWS region
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*BULK_DOWNLOAD_AWS_REGION =.*'
        line: "BULK_DOWNLOAD_AWS_REGION = '{{ BULK_DOWNLOAD_AWS_REGION }}'"

    - name: add monthly download s3 name
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*MONTHLY_DOWNLOAD_S3_BUCKET_NAME =.*'
        line: "MONTHLY_DOWNLOAD_S3_BUCKET_NAME = '{{ MONTHLY_DOWNLOAD_S3_BUCKET_NAME }}'"

    - name: add static url from s3
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*STATIC_URL =.*'
        line: "STATIC_URL = '{{ STATIC_ASSETS_URL }}'"

    - name: turn debug off in production or staging
      when: BRANCH == 'master' or BRANCH == 'stg'
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*DEBUG =.*'
        line: "DEBUG = False"

    - name: add host to ALLOWED_HOSTS
      when: BRANCH == 'dev' or BRANCH == 'sandbox'
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*ALLOWED_HOSTS =.*'
        line: "ALLOWED_HOSTS = ['{{ ALLOWED_HOSTS }}']"

    - name: enable elasticache
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CACHE_ENVIRONMENT\s*=.*'
        line: "CACHE_ENVIRONMENT = 'elasticache'"

    - name: enable local cache
      when: BRANCH == 'dev' or BRANCH == 'sandbox'
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*CACHE_ENVIRONMENT\s*=.*'
        line: "CACHE_ENVIRONMENT = 'local'"

    - name: replace TIMEOUT-IN-SECONDS ( NONPROD )
      when: BRANCH == 'sandbox' or BRANCH == 'dev'
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: 'TIMEOUT-IN-SECONDS'
        replace: "{{ NONPROD_CACHE_TIMEOUT }}"      
  
    - name: replace TIMEOUT-IN-SECONDS ( PROD )
      when: BRANCH == 'master' or BRANCH == 'stg'
      replace:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: 'TIMEOUT-IN-SECONDS'
        replace: "{{ PROD_CACHE_TIMEOUT }}"

    - name: add elastic-search endpoint env var 
      lineinfile:
        dest: "{{ CODE_HOME }}/usaspending_api/settings.py"
        regexp: '\s*ES_HOSTNAME\*=.*'
        line: "ES_HOSTNAME = '{{ ES_HOSTNAME }}'"

# SSL Certificates


    - name: copy public.pem from S3 Bucket
      become: true 
      shell: "aws s3 cp s3://usaspending-ssl/usaspending-api-gov/{{ DOMAIN }}/public.pem /etc/cert.pem --region us-gov-west-1"

    - name: copy private.pem from S3 Bucket
      become: true 
      shell: "aws s3 cp s3://usaspending-ssl/usaspending-api-gov/{{ DOMAIN }}/private.pem /etc/cert.key --region us-gov-west-1"


# config/filebeat/filebeat.yml

    - name: copy filebeat config
      become: true
      copy:
        src:  "{{ CONFIG_HOME }}/deploy/elk/filebeat_usaspending_api.yml"
        dest: "/etc/filebeat/filebeat.yml"
        remote_src: true
    - name: update filebeat config to set correct index
      become: true
      replace:
        dest: "/etc/filebeat/filebeat.yml"
        regexp: 'index: filebeat'
        replace: "index: usaspending-api-{{ vars['envs'][BRANCH]['env_short'] }}"

# Migrations / Management Commands

    - name: get DATABASE_URL env var
      shell: cat /etc/db_{{ BRANCH }}.sh
      register: temp_db_var

    - name: run migrations (on source DB)
      when: BRANCH != 'sandbox'
      shell: yes "yes" | python3.5 manage.py migrate
      environment: 
        DATABASE_URL: "{{ temp_db_var.stdout }}"
      args:
        chdir: "{{ CODE_HOME }}"

# Start/Stop Services  

    - name: restart filebeat
      become: true
      shell: systemctl restart filebeat
      ignore_errors: true

    - name: restart supervisord
      become: true
      shell: systemctl restart supervisord
      ignore_errors: true    
