---
- hosts: all
  remote_user: ec2-user
  become_method: sudo

  vars:
    BROKER_REPO: https://github.com/fedspendingtransparency/data-act-broker-backend.git
    TOOLS_REPO: https://github.com/fedspendingtransparency/data-act-build-tools.git
    BRANCH: "{{ BRANCH }}"
    CONFIG_BRANCH: "{{ CONFIG_BRANCH }}"
    TOOLS_BRANCH: "{{ TOOLS_BRANCH }}"
    CONFIG_HOME: /data-act/config
    DATADOG_YML_PATH: /data-act/config/datadog/datadog.yaml
    DATADOG_KEY_PATH: /shared/datadog_key
    ansible_python_interpreter: /usr/bin/python3
    GIT_TOKEN_PATH: /shared/github_data_act_service_account_token

    envs:
      master:      {env_long: prod }
      staging:     {env_long: staging }
      qat:         {env_long: qat }
      development: {env_long: dev }
      sandbox:     {env_long: sandbox}

  tasks:
    - name: Copy github credentials from SSM
      set_fact:
        pat_token: "{{ lookup('aws_ssm', GIT_TOKEN_PATH, region='us-gov-west-1') }}"

    - name: Set broker url
      set_fact: 
        CONFIG_REPO: https://pat:{{ pat_token }}@github.com/fedspendingtransparency/data-act-broker-config.git
   
# ========================= Git Checkout ========================#

    - name: Checkout required repos
      become: true
      git:
        repo: "{{ item.repo }}"
        version: "{{ item.version }}"
        dest: "{{ item.dest }}"
        force: "yes"
      with_items:
        - { repo: "{{ BROKER_REPO }}", version: "{{ BRANCH }}", dest: "/data-act/backend" }
        - { repo: "{{ CONFIG_REPO }}", version: "{{ CONFIG_BRANCH }}", dest: "/data-act/config" }
        - { repo: "{{ TOOLS_REPO }}", version: "{{ TOOLS_BRANCH }}", dest: "/data-act/build-tools" }

    - name: Update directory permissions
      become: true
      file:
        path: "{{ item }}"
        owner: ec2-user
        recurse: "yes"
      with_items: 
        - /data-act/
        - /tmp

# ======================== Install PIP Packages ========================#
  
    - name: Check for Python 3.5
      stat: 
        path: /bin/pip3.5
      register: python_check

    - name: Set pip executable
      set_fact: 
        python_pip_executable: "{{ 'pip3.5' if python_check.state.exists == 'true' else 'pip3' }}"
        
    - name: Upgrade PIP
      become: true
      pip: 
        name: pip
        executable: "{{ python_pip_executable }}"
        state: latest

    - name: Install all packages based on requirements.txt
      become: true
      pip: 
        chdir: /data-act/backend
        requirements: "{{ item }}"
        executable: "{{ python_pip_executable }}"
      with_items:
        - requirements.txt
        - server_requirements.txt

# ======================== Configure DataDog Key ========================#

    - name: get datadog_key from SSM
      set_fact: 
        dd_key: "{{ lookup('aws_ssm', DATADOG_KEY_PATH, region='us-gov-west-1') }}"

    - name: add Datadog license key to datadog.yaml
      lineinfile:
        dest: "{{ DATADOG_YML_PATH }}"
        regexp: '\s*api_key: .*'
        line: "api_key: {{ dd_key }}"
        create: yes

    - name: copy datadog.yml to its home location
      become: true
      copy:
        src: "{{ DATADOG_YML_PATH }}"
        dest: /etc/datadog-agent/datadog.yaml
        remote_src: true

#=============================== Configure ClamAv  ===============================#
    - name: Configure ClamAV
      become: true
      block: 
        - name: Create /var/log/clamav
          file:
            path: /var/log/clamav
            state: directory

        - name: chmod 0755 clamscan_daily
          file:
            path: /data-act/config/clamav/clamscan_daily.sh
            owner: ec2-user
            mode: "0755"

        - name : create Crontab to run daily scans
          cron:
            name: add clamscan_daily.sh and freshclam to crontab
            minute: "0"
            hour: "1"
            job: '/usr/bin/freshclam --quiet && /data-act/config/clamav/clamscan_daily.sh'

#===============================  Set http and https proxies  ===============================#
    - name: copy ansible-vars-{{ vars['envs'][BRANCH]['env_long'] }}.yml to 
      fetch:
        src: "{{ CONFIG_HOME }}/deployment/ansible-vars-{{ vars['envs'][BRANCH]['env_long'] }}.yml"
        dest: "{{ playbook_dir }}/"
        flat: true

    - name: Load variables from config repo
      include_vars: "{{ playbook_dir }}/ansible-vars-{{ vars['envs'][BRANCH]['env_long'] }}.yml"

    - name: create /etc/profile.d/proxy.sh to export proxy env vars
      become: true
      copy:
        dest: /etc/profile.d/proxy.sh
        mode: 0755
        content: |
          http_proxy={{ SQUID_ELB }}
          https_proxy={{ SQUID_ELB }}
          no_proxy={{ NO_PROXY_VAR }}
          export http_proxy https_proxy no_proxy
    
    - name: add proxy env vars to /etc/environment
      become: true
      blockinfile:
        dest: /etc/environment
        block: |
          http_proxy={{ SQUID_ELB }}
          https_proxy={{ SQUID_ELB }}
          HTTP_PROXY={{ SQUID_ELB }}
          HTTPS_PROXY={{ SQUID_ELB }}
          no_proxy={{ NO_PROXY_VAR }}
          NO_PROXY={{ NO_PROXY_VAR }}
    
    - name: Execute proxy.sh
      shell: /etc/profile.d/proxy.sh

    - name: add proxy env to /etc/systemd/system.config
      become: true
      ini_file:
        path: /etc/systemd/system.conf
        section: Manager
        option: DefaultEnvironment
        value: >
          http_proxy={{ SQUID_ELB }}
          https_proxy={{ SQUID_ELB }}
          HTTP_PROXY={{ SQUID_ELB }}
          HTTPS_PROXY={{ SQUID_ELB }}
          no_proxy={{ NO_PROXY_VAR }}
          NO_PROXY={{ NO_PROXY_VAR }}
